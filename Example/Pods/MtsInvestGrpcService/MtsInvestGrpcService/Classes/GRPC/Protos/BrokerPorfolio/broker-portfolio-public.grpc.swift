//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: broker-portfolio-public.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Ru_Mts_Trading_Broker_BrokerPortfolioServiceClient`, then call methods of this protocol to make API calls.
internal protocol Ru_Mts_Trading_Broker_BrokerPortfolioServiceClientProtocol: GRPCClient {
    var serviceName: String { get }
    var interceptors: Ru_Mts_Trading_Broker_BrokerPortfolioServiceClientInterceptorFactoryProtocol? { get }
    
    func getStream(
        _ request: Ru_Mts_Trading_Broker_PortfolioRequest,
        callOptions: CallOptions?,
        handler: @escaping (Ru_Mts_Trading_Broker_Commons_PortfolioResponse) -> Void
    ) -> ServerStreamingCall<Ru_Mts_Trading_Broker_PortfolioRequest, Ru_Mts_Trading_Broker_Commons_PortfolioResponse>
    
    func getStreamV2(
        _ request: Ru_Mts_Trading_Broker_PortfolioRequest,
        callOptions: CallOptions?,
        handler: @escaping (Ru_Mts_Trading_Broker_Commons_PortfolioResponse) -> Void
    ) -> ServerStreamingCall<Ru_Mts_Trading_Broker_PortfolioRequest, Ru_Mts_Trading_Broker_Commons_PortfolioResponse>
}

extension Ru_Mts_Trading_Broker_BrokerPortfolioServiceClientProtocol {
    internal var serviceName: String {
        return "ru.mts.trading.broker.BrokerPortfolioService"
    }
    
    /// Подписка на портфели
    ///
    /// - Parameters:
    ///   - request: Request to send to getStream.
    ///   - callOptions: Call options.
    ///   - handler: A closure called when each response is received from the server.
    /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
    internal func getStream(
        _ request: Ru_Mts_Trading_Broker_PortfolioRequest,
        callOptions: CallOptions? = nil,
        handler: @escaping (Ru_Mts_Trading_Broker_Commons_PortfolioResponse) -> Void
    ) -> ServerStreamingCall<Ru_Mts_Trading_Broker_PortfolioRequest, Ru_Mts_Trading_Broker_Commons_PortfolioResponse> {
        return self.makeServerStreamingCall(
            path: "/ru.mts.trading.broker.BrokerPortfolioService/getStream",
            request: request,
            callOptions: callOptions ?? self.defaultCallOptions,
            interceptors: self.interceptors?.makegetStreamInterceptors() ?? [],
            handler: handler
        )
    }
    
    /// Подписка на портфели V2: добавлены позиции для валют
    ///
    /// - Parameters:
    ///   - request: Request to send to getStreamV2.
    ///   - callOptions: Call options.
    ///   - handler: A closure called when each response is received from the server.
    /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
    internal func getStreamV2(
        _ request: Ru_Mts_Trading_Broker_PortfolioRequest,
        callOptions: CallOptions? = nil,
        handler: @escaping (Ru_Mts_Trading_Broker_Commons_PortfolioResponse) -> Void
    ) -> ServerStreamingCall<Ru_Mts_Trading_Broker_PortfolioRequest, Ru_Mts_Trading_Broker_Commons_PortfolioResponse> {
        return self.makeServerStreamingCall(
            path: "/ru.mts.trading.broker.BrokerPortfolioService/getStreamV2",
            request: request,
            callOptions: callOptions ?? self.defaultCallOptions,
            interceptors: self.interceptors?.makegetStreamV2Interceptors() ?? [],
            handler: handler
        )
    }
}

internal protocol Ru_Mts_Trading_Broker_BrokerPortfolioServiceClientInterceptorFactoryProtocol {
    
    /// - Returns: Interceptors to use when invoking 'getStream'.
    func makegetStreamInterceptors() -> [ClientInterceptor<Ru_Mts_Trading_Broker_PortfolioRequest, Ru_Mts_Trading_Broker_Commons_PortfolioResponse>]
    
    /// - Returns: Interceptors to use when invoking 'getStreamV2'.
    func makegetStreamV2Interceptors() -> [ClientInterceptor<Ru_Mts_Trading_Broker_PortfolioRequest, Ru_Mts_Trading_Broker_Commons_PortfolioResponse>]
}

internal final class Ru_Mts_Trading_Broker_BrokerPortfolioServiceClient: Ru_Mts_Trading_Broker_BrokerPortfolioServiceClientProtocol {
    internal let channel: GRPCChannel
    internal var defaultCallOptions: CallOptions
    internal var interceptors: Ru_Mts_Trading_Broker_BrokerPortfolioServiceClientInterceptorFactoryProtocol?
    
    /// Creates a client for the ru.mts.trading.broker.BrokerPortfolioService service.
    ///
    /// - Parameters:
    ///   - channel: `GRPCChannel` to the service host.
    ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
    ///   - interceptors: A factory providing interceptors for each RPC.
    internal init(
        channel: GRPCChannel,
        defaultCallOptions: CallOptions = CallOptions(),
        interceptors: Ru_Mts_Trading_Broker_BrokerPortfolioServiceClientInterceptorFactoryProtocol? = nil
    ) {
        self.channel = channel
        self.defaultCallOptions = defaultCallOptions
        self.interceptors = interceptors
    }
}

