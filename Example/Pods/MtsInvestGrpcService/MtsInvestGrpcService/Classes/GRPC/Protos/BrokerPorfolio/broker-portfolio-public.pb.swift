// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: broker-portfolio-public.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

struct Ru_Mts_Trading_Broker_PortfolioRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    /// период за который нужно расчитать доходность
    var period: Ru_Mts_Trading_Broker_Commons_Period = .oneDay
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "ru.mts.trading.broker"

extension Ru_Mts_Trading_Broker_PortfolioRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".PortfolioRequest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "period"),
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularEnumField(value: &self.period)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if self.period != .oneDay {
            try visitor.visitSingularEnumField(value: self.period, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func ==(lhs: Ru_Mts_Trading_Broker_PortfolioRequest, rhs: Ru_Mts_Trading_Broker_PortfolioRequest) -> Bool {
        if lhs.period != rhs.period {return false}
        if lhs.unknownFields != rhs.unknownFields {return false}
        return true
    }
}
