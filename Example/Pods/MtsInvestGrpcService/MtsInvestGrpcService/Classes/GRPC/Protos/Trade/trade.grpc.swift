//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: trade.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Ru_Mts_Trading_Trade_TradingApiClient`, then call methods of this protocol to make API calls.
internal protocol Ru_Mts_Trading_Trade_TradingApiClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Ru_Mts_Trading_Trade_TradingApiClientInterceptorFactoryProtocol? { get }

  func watch(
    callOptions: CallOptions?,
    handler: @escaping (Ru_Mts_Trading_Trade_PriceChange) -> Void
  ) -> BidirectionalStreamingCall<Ru_Mts_Trading_Trade_PriceWatchSubcriptionRequest, Ru_Mts_Trading_Trade_PriceChange>

  func watchSingle(
    _ request: Ru_Mts_Trading_Trade_PriceChangeSubsriptionSingleRequest,
    callOptions: CallOptions?,
    handler: @escaping (Ru_Mts_Trading_Trade_PriceChange) -> Void
  ) -> ServerStreamingCall<Ru_Mts_Trading_Trade_PriceChangeSubsriptionSingleRequest, Ru_Mts_Trading_Trade_PriceChange>

  func operation(
    callOptions: CallOptions?,
    handler: @escaping (Ru_Mts_Trading_Trade_OperationState) -> Void
  ) -> BidirectionalStreamingCall<Ru_Mts_Trading_Trade_OperationIntent, Ru_Mts_Trading_Trade_OperationState>

  func hide(
    _ request: Ru_Mts_Trading_Trade_HideOperationState,
    callOptions: CallOptions?
  ) -> UnaryCall<Ru_Mts_Trading_Trade_HideOperationState, Ru_Mts_Trading_Trade_HiddenOperation>
}

extension Ru_Mts_Trading_Trade_TradingApiClientProtocol {
  internal var serviceName: String {
    return "ru.mts.trading.trade.TradingApi"
  }

  /// Bidirectional streaming call to watch
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func watch(
    callOptions: CallOptions? = nil,
    handler: @escaping (Ru_Mts_Trading_Trade_PriceChange) -> Void
  ) -> BidirectionalStreamingCall<Ru_Mts_Trading_Trade_PriceWatchSubcriptionRequest, Ru_Mts_Trading_Trade_PriceChange> {
    return self.makeBidirectionalStreamingCall(
      path: "/ru.mts.trading.trade.TradingApi/watch",
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makewatchInterceptors() ?? [],
      handler: handler
    )
  }

  /// Server streaming call to watchSingle
  ///
  /// - Parameters:
  ///   - request: Request to send to watchSingle.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func watchSingle(
    _ request: Ru_Mts_Trading_Trade_PriceChangeSubsriptionSingleRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Ru_Mts_Trading_Trade_PriceChange) -> Void
  ) -> ServerStreamingCall<Ru_Mts_Trading_Trade_PriceChangeSubsriptionSingleRequest, Ru_Mts_Trading_Trade_PriceChange> {
    return self.makeServerStreamingCall(
      path: "/ru.mts.trading.trade.TradingApi/watchSingle",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makewatchSingleInterceptors() ?? [],
      handler: handler
    )
  }

  /// Bidirectional streaming call to operation
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func operation(
    callOptions: CallOptions? = nil,
    handler: @escaping (Ru_Mts_Trading_Trade_OperationState) -> Void
  ) -> BidirectionalStreamingCall<Ru_Mts_Trading_Trade_OperationIntent, Ru_Mts_Trading_Trade_OperationState> {
    return self.makeBidirectionalStreamingCall(
      path: "/ru.mts.trading.trade.TradingApi/operation",
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeoperationInterceptors() ?? [],
      handler: handler
    )
  }

  /// Unary call to hide
  ///
  /// - Parameters:
  ///   - request: Request to send to hide.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func hide(
    _ request: Ru_Mts_Trading_Trade_HideOperationState,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ru_Mts_Trading_Trade_HideOperationState, Ru_Mts_Trading_Trade_HiddenOperation> {
    return self.makeUnaryCall(
      path: "/ru.mts.trading.trade.TradingApi/hide",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makehideInterceptors() ?? []
    )
  }
}

internal protocol Ru_Mts_Trading_Trade_TradingApiClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'watch'.
  func makewatchInterceptors() -> [ClientInterceptor<Ru_Mts_Trading_Trade_PriceWatchSubcriptionRequest, Ru_Mts_Trading_Trade_PriceChange>]

  /// - Returns: Interceptors to use when invoking 'watchSingle'.
  func makewatchSingleInterceptors() -> [ClientInterceptor<Ru_Mts_Trading_Trade_PriceChangeSubsriptionSingleRequest, Ru_Mts_Trading_Trade_PriceChange>]

  /// - Returns: Interceptors to use when invoking 'operation'.
  func makeoperationInterceptors() -> [ClientInterceptor<Ru_Mts_Trading_Trade_OperationIntent, Ru_Mts_Trading_Trade_OperationState>]

  /// - Returns: Interceptors to use when invoking 'hide'.
  func makehideInterceptors() -> [ClientInterceptor<Ru_Mts_Trading_Trade_HideOperationState, Ru_Mts_Trading_Trade_HiddenOperation>]
}

internal final class Ru_Mts_Trading_Trade_TradingApiClient: Ru_Mts_Trading_Trade_TradingApiClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Ru_Mts_Trading_Trade_TradingApiClientInterceptorFactoryProtocol?

  /// Creates a client for the ru.mts.trading.trade.TradingApi service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ru_Mts_Trading_Trade_TradingApiClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Usage: instantiate `Ru_Mts_Trading_Trade_TradingClient`, then call methods of this protocol to make API calls.
internal protocol Ru_Mts_Trading_Trade_TradingClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Ru_Mts_Trading_Trade_TradingClientInterceptorFactoryProtocol? { get }

  func watch(
    callOptions: CallOptions?,
    handler: @escaping (Ru_Mts_Trading_Trade_WatchPrice) -> Void
  ) -> BidirectionalStreamingCall<Ru_Mts_Trading_Trade_WatchRequest, Ru_Mts_Trading_Trade_WatchPrice>

  func watchSingle(
    _ request: Ru_Mts_Trading_Trade_WatchRequest,
    callOptions: CallOptions?,
    handler: @escaping (Ru_Mts_Trading_Trade_WatchPrice) -> Void
  ) -> ServerStreamingCall<Ru_Mts_Trading_Trade_WatchRequest, Ru_Mts_Trading_Trade_WatchPrice>

  func operation(
    callOptions: CallOptions?,
    handler: @escaping (Ru_Mts_Trading_Trade_Order) -> Void
  ) -> BidirectionalStreamingCall<Ru_Mts_Trading_Trade_TradingOperation, Ru_Mts_Trading_Trade_Order>

  func hide(
    _ request: Ru_Mts_Trading_Trade_HideRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ru_Mts_Trading_Trade_HideRequest, Ru_Mts_Trading_Trade_HideResponse>
}

extension Ru_Mts_Trading_Trade_TradingClientProtocol {
  internal var serviceName: String {
    return "ru.mts.trading.trade.Trading"
  }

  /// Bidirectional streaming call to watch
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func watch(
    callOptions: CallOptions? = nil,
    handler: @escaping (Ru_Mts_Trading_Trade_WatchPrice) -> Void
  ) -> BidirectionalStreamingCall<Ru_Mts_Trading_Trade_WatchRequest, Ru_Mts_Trading_Trade_WatchPrice> {
    return self.makeBidirectionalStreamingCall(
      path: "/ru.mts.trading.trade.Trading/watch",
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makewatchInterceptors() ?? [],
      handler: handler
    )
  }

  /// Server streaming call to watchSingle
  ///
  /// - Parameters:
  ///   - request: Request to send to watchSingle.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func watchSingle(
    _ request: Ru_Mts_Trading_Trade_WatchRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Ru_Mts_Trading_Trade_WatchPrice) -> Void
  ) -> ServerStreamingCall<Ru_Mts_Trading_Trade_WatchRequest, Ru_Mts_Trading_Trade_WatchPrice> {
    return self.makeServerStreamingCall(
      path: "/ru.mts.trading.trade.Trading/watchSingle",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makewatchSingleInterceptors() ?? [],
      handler: handler
    )
  }

  /// Bidirectional streaming call to operation
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func operation(
    callOptions: CallOptions? = nil,
    handler: @escaping (Ru_Mts_Trading_Trade_Order) -> Void
  ) -> BidirectionalStreamingCall<Ru_Mts_Trading_Trade_TradingOperation, Ru_Mts_Trading_Trade_Order> {
    return self.makeBidirectionalStreamingCall(
      path: "/ru.mts.trading.trade.Trading/operation",
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeoperationInterceptors() ?? [],
      handler: handler
    )
  }

  /// Unary call to hide
  ///
  /// - Parameters:
  ///   - request: Request to send to hide.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func hide(
    _ request: Ru_Mts_Trading_Trade_HideRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ru_Mts_Trading_Trade_HideRequest, Ru_Mts_Trading_Trade_HideResponse> {
    return self.makeUnaryCall(
      path: "/ru.mts.trading.trade.Trading/hide",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makehideInterceptors() ?? []
    )
  }
}

internal protocol Ru_Mts_Trading_Trade_TradingClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'watch'.
  func makewatchInterceptors() -> [ClientInterceptor<Ru_Mts_Trading_Trade_WatchRequest, Ru_Mts_Trading_Trade_WatchPrice>]

  /// - Returns: Interceptors to use when invoking 'watchSingle'.
  func makewatchSingleInterceptors() -> [ClientInterceptor<Ru_Mts_Trading_Trade_WatchRequest, Ru_Mts_Trading_Trade_WatchPrice>]

  /// - Returns: Interceptors to use when invoking 'operation'.
  func makeoperationInterceptors() -> [ClientInterceptor<Ru_Mts_Trading_Trade_TradingOperation, Ru_Mts_Trading_Trade_Order>]

  /// - Returns: Interceptors to use when invoking 'hide'.
  func makehideInterceptors() -> [ClientInterceptor<Ru_Mts_Trading_Trade_HideRequest, Ru_Mts_Trading_Trade_HideResponse>]
}

internal final class Ru_Mts_Trading_Trade_TradingClient: Ru_Mts_Trading_Trade_TradingClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Ru_Mts_Trading_Trade_TradingClientInterceptorFactoryProtocol?

  /// Creates a client for the ru.mts.trading.trade.Trading service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ru_Mts_Trading_Trade_TradingClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

