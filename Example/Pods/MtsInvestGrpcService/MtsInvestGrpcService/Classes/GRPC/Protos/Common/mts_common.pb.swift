// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: mts_common.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

enum GrpcOperatingSystem: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case ios // = 0
    case android // = 1
    case UNRECOGNIZED(Int)
    
    init() {
        self = .ios
    }
    
    init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .ios
        case 1: self = .android
        default: self = .UNRECOGNIZED(rawValue)
        }
    }
    
    var rawValue: Int {
        switch self {
        case .ios: return 0
        case .android: return 1
        case .UNRECOGNIZED(let i): return i
        }
    }
    
}

#if swift(>=4.2)

extension GrpcOperatingSystem: CaseIterable {
    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static var allCases: [GrpcOperatingSystem] = [
        .ios,
        .android,
    ]
}

#endif  // swift(>=4.2)

enum GrpcInstrumentCommonType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case other // = 0
    case stock // = 1
    case bond // = 2
    case etf // = 3
    case currency // = 4
    case foreignStock // = 5
    case foreignBond // = 6
    case UNRECOGNIZED(Int)
    
    init() {
        self = .other
    }
    
    init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .other
        case 1: self = .stock
        case 2: self = .bond
        case 3: self = .etf
        case 4: self = .currency
        case 5: self = .foreignStock
        case 6: self = .foreignBond
        default: self = .UNRECOGNIZED(rawValue)
        }
    }
    
    var rawValue: Int {
        switch self {
        case .other: return 0
        case .stock: return 1
        case .bond: return 2
        case .etf: return 3
        case .currency: return 4
        case .foreignStock: return 5
        case .foreignBond: return 6
        case .UNRECOGNIZED(let i): return i
        }
    }
    
}

#if swift(>=4.2)

extension GrpcInstrumentCommonType: CaseIterable {
    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static var allCases: [GrpcInstrumentCommonType] = [
        .other,
        .stock,
        .bond,
        .etf,
        .currency,
        .foreignStock,
        .foreignBond,
    ]
}

#endif  // swift(>=4.2)

struct GrpcUserId {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var value: String = String()
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct GrpcFileId {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var value: String = String()
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct GrpcFileInformation {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var id: GrpcFileId {
        get {return _storage._id ?? GrpcFileId()}
        set {_uniqueStorage()._id = newValue}
    }
    /// Returns true if `id` has been explicitly set.
    var hasID: Bool {return _storage._id != nil}
    /// Clears the value of `id`. Subsequent reads from it will return its default value.
    mutating func clearID() {_uniqueStorage()._id = nil}
    
    var userID: GrpcUserId {
        get {return _storage._userID ?? GrpcUserId()}
        set {_uniqueStorage()._userID = newValue}
    }
    /// Returns true if `userID` has been explicitly set.
    var hasUserID: Bool {return _storage._userID != nil}
    /// Clears the value of `userID`. Subsequent reads from it will return its default value.
    mutating func clearUserID() {_uniqueStorage()._userID = nil}
    
    var name: String {
        get {return _storage._name}
        set {_uniqueStorage()._name = newValue}
    }
    
    var contentType: String {
        get {return _storage._contentType}
        set {_uniqueStorage()._contentType = newValue}
    }
    
    var size: Int32 {
        get {return _storage._size}
        set {_uniqueStorage()._size = newValue}
    }
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
    
    fileprivate var _storage = _StorageClass.defaultInstance
}

struct GrpcFileContent {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    /// USE BIG ENDIAN FOR SERIALIZATION 
    var content: Data = SwiftProtobuf.Internal.emptyData
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct GrpcValidationId {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var value: String = String()
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct GrpcAccountNumber {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var value: String = String()
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct GrpcUserRequisiteId {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var value: String = String()
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

///
///Договариваемся, что может принимать одно из значений:
///- RUB
///- USD
///- EUR
struct GrpcCurrency {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var value: String = String()
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension GrpcOperatingSystem: SwiftProtobuf._ProtoNameProviding {
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "IOS"),
        1: .same(proto: "ANDROID"),
    ]
}

extension GrpcInstrumentCommonType: SwiftProtobuf._ProtoNameProviding {
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "OTHER"),
        1: .same(proto: "STOCK"),
        2: .same(proto: "BOND"),
        3: .same(proto: "ETF"),
        4: .same(proto: "CURRENCY"),
        5: .same(proto: "FOREIGN_STOCK"),
        6: .same(proto: "FOREIGN_BOND"),
    ]
}

extension GrpcUserId: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "UserId"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "value"),
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &self.value)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !self.value.isEmpty {
            try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func ==(lhs: GrpcUserId, rhs: GrpcUserId) -> Bool {
        if lhs.value != rhs.value {return false}
        if lhs.unknownFields != rhs.unknownFields {return false}
        return true
    }
}

extension GrpcFileId: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "FileId"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "value"),
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &self.value)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !self.value.isEmpty {
            try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func ==(lhs: GrpcFileId, rhs: GrpcFileId) -> Bool {
        if lhs.value != rhs.value {return false}
        if lhs.unknownFields != rhs.unknownFields {return false}
        return true
    }
}

extension GrpcFileInformation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "FileInformation"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "id"),
        2: .same(proto: "userId"),
        3: .same(proto: "name"),
        4: .same(proto: "contentType"),
        5: .same(proto: "size"),
    ]
    
    fileprivate class _StorageClass {
        var _id: GrpcFileId? = nil
        var _userID: GrpcUserId? = nil
        var _name: String = String()
        var _contentType: String = String()
        var _size: Int32 = 0
        
        static let defaultInstance = _StorageClass()
        
        private init() {}
        
        init(copying source: _StorageClass) {
            _id = source._id
            _userID = source._userID
            _name = source._name
            _contentType = source._contentType
            _size = source._size
        }
    }
    
    fileprivate mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&_storage) {
            _storage = _StorageClass(copying: _storage)
        }
        return _storage
    }
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        _ = _uniqueStorage()
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            while let fieldNumber = try decoder.nextFieldNumber() {
                switch fieldNumber {
                case 1: try decoder.decodeSingularMessageField(value: &_storage._id)
                case 2: try decoder.decodeSingularMessageField(value: &_storage._userID)
                case 3: try decoder.decodeSingularStringField(value: &_storage._name)
                case 4: try decoder.decodeSingularStringField(value: &_storage._contentType)
                case 5: try decoder.decodeSingularInt32Field(value: &_storage._size)
                default: break
                }
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            if let v = _storage._id {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
            }
            if let v = _storage._userID {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
            }
            if !_storage._name.isEmpty {
                try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 3)
            }
            if !_storage._contentType.isEmpty {
                try visitor.visitSingularStringField(value: _storage._contentType, fieldNumber: 4)
            }
            if _storage._size != 0 {
                try visitor.visitSingularInt32Field(value: _storage._size, fieldNumber: 5)
            }
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func ==(lhs: GrpcFileInformation, rhs: GrpcFileInformation) -> Bool {
        if lhs._storage !== rhs._storage {
            let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
                let _storage = _args.0
                let rhs_storage = _args.1
                if _storage._id != rhs_storage._id {return false}
                if _storage._userID != rhs_storage._userID {return false}
                if _storage._name != rhs_storage._name {return false}
                if _storage._contentType != rhs_storage._contentType {return false}
                if _storage._size != rhs_storage._size {return false}
                return true
            }
            if !storagesAreEqual {return false}
        }
        if lhs.unknownFields != rhs.unknownFields {return false}
        return true
    }
}

extension GrpcFileContent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "FileContent"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "content"),
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularBytesField(value: &self.content)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !self.content.isEmpty {
            try visitor.visitSingularBytesField(value: self.content, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func ==(lhs: GrpcFileContent, rhs: GrpcFileContent) -> Bool {
        if lhs.content != rhs.content {return false}
        if lhs.unknownFields != rhs.unknownFields {return false}
        return true
    }
}

extension GrpcValidationId: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "ValidationId"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "value"),
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &self.value)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !self.value.isEmpty {
            try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func ==(lhs: GrpcValidationId, rhs: GrpcValidationId) -> Bool {
        if lhs.value != rhs.value {return false}
        if lhs.unknownFields != rhs.unknownFields {return false}
        return true
    }
}

extension GrpcAccountNumber: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "AccountNumber"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "value"),
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &self.value)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !self.value.isEmpty {
            try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func ==(lhs: GrpcAccountNumber, rhs: GrpcAccountNumber) -> Bool {
        if lhs.value != rhs.value {return false}
        if lhs.unknownFields != rhs.unknownFields {return false}
        return true
    }
}

extension GrpcUserRequisiteId: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "UserRequisiteId"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "value"),
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &self.value)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !self.value.isEmpty {
            try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func ==(lhs: GrpcUserRequisiteId, rhs: GrpcUserRequisiteId) -> Bool {
        if lhs.value != rhs.value {return false}
        if lhs.unknownFields != rhs.unknownFields {return false}
        return true
    }
}

extension GrpcCurrency: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "Currency"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "value"),
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &self.value)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !self.value.isEmpty {
            try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func ==(lhs: GrpcCurrency, rhs: GrpcCurrency) -> Bool {
        if lhs.value != rhs.value {return false}
        if lhs.unknownFields != rhs.unknownFields {return false}
        return true
    }
}
