// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: instruments-common.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct GetInstrumentBriefRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ticker: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GetInstrumentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ticker: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GetInstrumentsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var filter: InstrumentsFilter {
    get {return _storage._filter ?? InstrumentsFilter()}
    set {_uniqueStorage()._filter = newValue}
  }
  /// Returns true if `filter` has been explicitly set.
  var hasFilter: Bool {return _storage._filter != nil}
  /// Clears the value of `filter`. Subsequent reads from it will return its default value.
  mutating func clearFilter() {_uniqueStorage()._filter = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct ListInstrumentsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var instruments: [Instrument] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GetInstrumentsBriefRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var filter: InstrumentsFilter {
    get {return _storage._filter ?? InstrumentsFilter()}
    set {_uniqueStorage()._filter = newValue}
  }
  /// Returns true if `filter` has been explicitly set.
  var hasFilter: Bool {return _storage._filter != nil}
  /// Clears the value of `filter`. Subsequent reads from it will return its default value.
  mutating func clearFilter() {_uniqueStorage()._filter = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct ListInstrumentsBriefResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var instruments: [InstrumentBrief] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct InstrumentsFilter {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var tickers: [String] = []

  var secType: [Iticapital_ApiMts_Security_V1_SecurityType] = []

  var currency: [Iticapital_ApiMts_Security_V1_Currency] = []

  var tradingStatus: [Iticapital_ApiMts_Security_V1_TradingStatus] = []

  var commonTypes: [GrpcInstrumentCommonType] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct InstrumentBrief {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var instrumentID: String {
    get {return _storage._instrumentID}
    set {_uniqueStorage()._instrumentID = newValue}
  }

  var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  var price: Iticapital_ApiMts_Type_Float {
    get {return _storage._price ?? Iticapital_ApiMts_Type_Float()}
    set {_uniqueStorage()._price = newValue}
  }
  /// Returns true if `price` has been explicitly set.
  var hasPrice: Bool {return _storage._price != nil}
  /// Clears the value of `price`. Subsequent reads from it will return its default value.
  mutating func clearPrice() {_uniqueStorage()._price = nil}

  var currency: Iticapital_ApiMts_Security_V1_Currency {
    get {return _storage._currency}
    set {_uniqueStorage()._currency = newValue}
  }

  var dayChange: Iticapital_ApiMts_Type_Float {
    get {return _storage._dayChange ?? Iticapital_ApiMts_Type_Float()}
    set {_uniqueStorage()._dayChange = newValue}
  }
  /// Returns true if `dayChange` has been explicitly set.
  var hasDayChange: Bool {return _storage._dayChange != nil}
  /// Clears the value of `dayChange`. Subsequent reads from it will return its default value.
  mutating func clearDayChange() {_uniqueStorage()._dayChange = nil}

  var weekChange: Iticapital_ApiMts_Type_Float {
    get {return _storage._weekChange ?? Iticapital_ApiMts_Type_Float()}
    set {_uniqueStorage()._weekChange = newValue}
  }
  /// Returns true if `weekChange` has been explicitly set.
  var hasWeekChange: Bool {return _storage._weekChange != nil}
  /// Clears the value of `weekChange`. Subsequent reads from it will return its default value.
  mutating func clearWeekChange() {_uniqueStorage()._weekChange = nil}

  var monthChange: Iticapital_ApiMts_Type_Float {
    get {return _storage._monthChange ?? Iticapital_ApiMts_Type_Float()}
    set {_uniqueStorage()._monthChange = newValue}
  }
  /// Returns true if `monthChange` has been explicitly set.
  var hasMonthChange: Bool {return _storage._monthChange != nil}
  /// Clears the value of `monthChange`. Subsequent reads from it will return its default value.
  mutating func clearMonthChange() {_uniqueStorage()._monthChange = nil}

  var threeMonthsChange: Iticapital_ApiMts_Type_Float {
    get {return _storage._threeMonthsChange ?? Iticapital_ApiMts_Type_Float()}
    set {_uniqueStorage()._threeMonthsChange = newValue}
  }
  /// Returns true if `threeMonthsChange` has been explicitly set.
  var hasThreeMonthsChange: Bool {return _storage._threeMonthsChange != nil}
  /// Clears the value of `threeMonthsChange`. Subsequent reads from it will return its default value.
  mutating func clearThreeMonthsChange() {_uniqueStorage()._threeMonthsChange = nil}

  var yearChange: Iticapital_ApiMts_Type_Float {
    get {return _storage._yearChange ?? Iticapital_ApiMts_Type_Float()}
    set {_uniqueStorage()._yearChange = newValue}
  }
  /// Returns true if `yearChange` has been explicitly set.
  var hasYearChange: Bool {return _storage._yearChange != nil}
  /// Clears the value of `yearChange`. Subsequent reads from it will return its default value.
  mutating func clearYearChange() {_uniqueStorage()._yearChange = nil}

  var threeYearsChange: Iticapital_ApiMts_Type_Float {
    get {return _storage._threeYearsChange ?? Iticapital_ApiMts_Type_Float()}
    set {_uniqueStorage()._threeYearsChange = newValue}
  }
  /// Returns true if `threeYearsChange` has been explicitly set.
  var hasThreeYearsChange: Bool {return _storage._threeYearsChange != nil}
  /// Clears the value of `threeYearsChange`. Subsequent reads from it will return its default value.
  mutating func clearThreeYearsChange() {_uniqueStorage()._threeYearsChange = nil}

  var allTimeChange: Iticapital_ApiMts_Type_Float {
    get {return _storage._allTimeChange ?? Iticapital_ApiMts_Type_Float()}
    set {_uniqueStorage()._allTimeChange = newValue}
  }
  /// Returns true if `allTimeChange` has been explicitly set.
  var hasAllTimeChange: Bool {return _storage._allTimeChange != nil}
  /// Clears the value of `allTimeChange`. Subsequent reads from it will return its default value.
  mutating func clearAllTimeChange() {_uniqueStorage()._allTimeChange = nil}

  ///todo не используется сейчас, но в старых сборках использовался
  var secType: Iticapital_ApiMts_Security_V1_SecurityType {
    get {return _storage._secType}
    set {_uniqueStorage()._secType = newValue}
  }

  var lotSize: UInt64 {
    get {return _storage._lotSize}
    set {_uniqueStorage()._lotSize = newValue}
  }

  var maturityDate: Google_Type_Date {
    get {return _storage._maturityDate ?? Google_Type_Date()}
    set {_uniqueStorage()._maturityDate = newValue}
  }
  /// Returns true if `maturityDate` has been explicitly set.
  var hasMaturityDate: Bool {return _storage._maturityDate != nil}
  /// Clears the value of `maturityDate`. Subsequent reads from it will return its default value.
  mutating func clearMaturityDate() {_uniqueStorage()._maturityDate = nil}

  var commonType: GrpcInstrumentCommonType {
    get {return _storage._commonType}
    set {_uniqueStorage()._commonType = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Instrument {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var instrumentID: String {
    get {return _storage._instrumentID}
    set {_uniqueStorage()._instrumentID = newValue}
  }

  var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  ///todo не используется сейчас, но в старых сборках использовался
  var secType: Iticapital_ApiMts_Security_V1_SecurityType {
    get {return _storage._secType}
    set {_uniqueStorage()._secType = newValue}
  }

  var lotSize: UInt32 {
    get {return _storage._lotSize}
    set {_uniqueStorage()._lotSize = newValue}
  }

  var faceValue: UInt32 {
    get {return _storage._faceValue}
    set {_uniqueStorage()._faceValue = newValue}
  }

  var maturityDate: Google_Type_Date {
    get {return _storage._maturityDate ?? Google_Type_Date()}
    set {_uniqueStorage()._maturityDate = newValue}
  }
  /// Returns true if `maturityDate` has been explicitly set.
  var hasMaturityDate: Bool {return _storage._maturityDate != nil}
  /// Clears the value of `maturityDate`. Subsequent reads from it will return its default value.
  mutating func clearMaturityDate() {_uniqueStorage()._maturityDate = nil}

  var coupon: Iticapital_ApiMts_Type_Float {
    get {return _storage._coupon ?? Iticapital_ApiMts_Type_Float()}
    set {_uniqueStorage()._coupon = newValue}
  }
  /// Returns true if `coupon` has been explicitly set.
  var hasCoupon: Bool {return _storage._coupon != nil}
  /// Clears the value of `coupon`. Subsequent reads from it will return its default value.
  mutating func clearCoupon() {_uniqueStorage()._coupon = nil}

  var couponPeriod: UInt32 {
    get {return _storage._couponPeriod}
    set {_uniqueStorage()._couponPeriod = newValue}
  }

  var nextCoupon: Google_Type_Date {
    get {return _storage._nextCoupon ?? Google_Type_Date()}
    set {_uniqueStorage()._nextCoupon = newValue}
  }
  /// Returns true if `nextCoupon` has been explicitly set.
  var hasNextCoupon: Bool {return _storage._nextCoupon != nil}
  /// Clears the value of `nextCoupon`. Subsequent reads from it will return its default value.
  mutating func clearNextCoupon() {_uniqueStorage()._nextCoupon = nil}

  var currency: Iticapital_ApiMts_Security_V1_Currency {
    get {return _storage._currency}
    set {_uniqueStorage()._currency = newValue}
  }

  var minStep: Iticapital_ApiMts_Type_Float {
    get {return _storage._minStep ?? Iticapital_ApiMts_Type_Float()}
    set {_uniqueStorage()._minStep = newValue}
  }
  /// Returns true if `minStep` has been explicitly set.
  var hasMinStep: Bool {return _storage._minStep != nil}
  /// Clears the value of `minStep`. Subsequent reads from it will return its default value.
  mutating func clearMinStep() {_uniqueStorage()._minStep = nil}

  var decimals: Double {
    get {return _storage._decimals}
    set {_uniqueStorage()._decimals = newValue}
  }

  var price: Iticapital_ApiMts_Type_Float {
    get {return _storage._price ?? Iticapital_ApiMts_Type_Float()}
    set {_uniqueStorage()._price = newValue}
  }
  /// Returns true if `price` has been explicitly set.
  var hasPrice: Bool {return _storage._price != nil}
  /// Clears the value of `price`. Subsequent reads from it will return its default value.
  mutating func clearPrice() {_uniqueStorage()._price = nil}

  var isin: String {
    get {return _storage._isin}
    set {_uniqueStorage()._isin = newValue}
  }

  var accruedInterest: Iticapital_ApiMts_Type_Float {
    get {return _storage._accruedInterest ?? Iticapital_ApiMts_Type_Float()}
    set {_uniqueStorage()._accruedInterest = newValue}
  }
  /// Returns true if `accruedInterest` has been explicitly set.
  var hasAccruedInterest: Bool {return _storage._accruedInterest != nil}
  /// Clears the value of `accruedInterest`. Subsequent reads from it will return its default value.
  mutating func clearAccruedInterest() {_uniqueStorage()._accruedInterest = nil}

  var dayChange: Iticapital_ApiMts_Type_Float {
    get {return _storage._dayChange ?? Iticapital_ApiMts_Type_Float()}
    set {_uniqueStorage()._dayChange = newValue}
  }
  /// Returns true if `dayChange` has been explicitly set.
  var hasDayChange: Bool {return _storage._dayChange != nil}
  /// Clears the value of `dayChange`. Subsequent reads from it will return its default value.
  mutating func clearDayChange() {_uniqueStorage()._dayChange = nil}

  var weekChange: Iticapital_ApiMts_Type_Float {
    get {return _storage._weekChange ?? Iticapital_ApiMts_Type_Float()}
    set {_uniqueStorage()._weekChange = newValue}
  }
  /// Returns true if `weekChange` has been explicitly set.
  var hasWeekChange: Bool {return _storage._weekChange != nil}
  /// Clears the value of `weekChange`. Subsequent reads from it will return its default value.
  mutating func clearWeekChange() {_uniqueStorage()._weekChange = nil}

  var monthChange: Iticapital_ApiMts_Type_Float {
    get {return _storage._monthChange ?? Iticapital_ApiMts_Type_Float()}
    set {_uniqueStorage()._monthChange = newValue}
  }
  /// Returns true if `monthChange` has been explicitly set.
  var hasMonthChange: Bool {return _storage._monthChange != nil}
  /// Clears the value of `monthChange`. Subsequent reads from it will return its default value.
  mutating func clearMonthChange() {_uniqueStorage()._monthChange = nil}

  var threeMonthsChange: Iticapital_ApiMts_Type_Float {
    get {return _storage._threeMonthsChange ?? Iticapital_ApiMts_Type_Float()}
    set {_uniqueStorage()._threeMonthsChange = newValue}
  }
  /// Returns true if `threeMonthsChange` has been explicitly set.
  var hasThreeMonthsChange: Bool {return _storage._threeMonthsChange != nil}
  /// Clears the value of `threeMonthsChange`. Subsequent reads from it will return its default value.
  mutating func clearThreeMonthsChange() {_uniqueStorage()._threeMonthsChange = nil}

  var yearChange: Iticapital_ApiMts_Type_Float {
    get {return _storage._yearChange ?? Iticapital_ApiMts_Type_Float()}
    set {_uniqueStorage()._yearChange = newValue}
  }
  /// Returns true if `yearChange` has been explicitly set.
  var hasYearChange: Bool {return _storage._yearChange != nil}
  /// Clears the value of `yearChange`. Subsequent reads from it will return its default value.
  mutating func clearYearChange() {_uniqueStorage()._yearChange = nil}

  var threeYearsChange: Iticapital_ApiMts_Type_Float {
    get {return _storage._threeYearsChange ?? Iticapital_ApiMts_Type_Float()}
    set {_uniqueStorage()._threeYearsChange = newValue}
  }
  /// Returns true if `threeYearsChange` has been explicitly set.
  var hasThreeYearsChange: Bool {return _storage._threeYearsChange != nil}
  /// Clears the value of `threeYearsChange`. Subsequent reads from it will return its default value.
  mutating func clearThreeYearsChange() {_uniqueStorage()._threeYearsChange = nil}

  var allTimeChange: Iticapital_ApiMts_Type_Float {
    get {return _storage._allTimeChange ?? Iticapital_ApiMts_Type_Float()}
    set {_uniqueStorage()._allTimeChange = newValue}
  }
  /// Returns true if `allTimeChange` has been explicitly set.
  var hasAllTimeChange: Bool {return _storage._allTimeChange != nil}
  /// Clears the value of `allTimeChange`. Subsequent reads from it will return its default value.
  mutating func clearAllTimeChange() {_uniqueStorage()._allTimeChange = nil}

  var fullDescription: String {
    get {return _storage._fullDescription}
    set {_uniqueStorage()._fullDescription = newValue}
  }

  var priceActualityTime: UInt64 {
    get {return _storage._priceActualityTime}
    set {_uniqueStorage()._priceActualityTime = newValue}
  }

  var commonType: GrpcInstrumentCommonType {
    get {return _storage._commonType}
    set {_uniqueStorage()._commonType = newValue}
  }

  var dayPeriodStart: Google_Type_Date {
    get {return _storage._dayPeriodStart ?? Google_Type_Date()}
    set {_uniqueStorage()._dayPeriodStart = newValue}
  }
  /// Returns true if `dayPeriodStart` has been explicitly set.
  var hasDayPeriodStart: Bool {return _storage._dayPeriodStart != nil}
  /// Clears the value of `dayPeriodStart`. Subsequent reads from it will return its default value.
  mutating func clearDayPeriodStart() {_uniqueStorage()._dayPeriodStart = nil}

  var weekPeriodStart: Google_Type_Date {
    get {return _storage._weekPeriodStart ?? Google_Type_Date()}
    set {_uniqueStorage()._weekPeriodStart = newValue}
  }
  /// Returns true if `weekPeriodStart` has been explicitly set.
  var hasWeekPeriodStart: Bool {return _storage._weekPeriodStart != nil}
  /// Clears the value of `weekPeriodStart`. Subsequent reads from it will return its default value.
  mutating func clearWeekPeriodStart() {_uniqueStorage()._weekPeriodStart = nil}

  var monthPeriodStart: Google_Type_Date {
    get {return _storage._monthPeriodStart ?? Google_Type_Date()}
    set {_uniqueStorage()._monthPeriodStart = newValue}
  }
  /// Returns true if `monthPeriodStart` has been explicitly set.
  var hasMonthPeriodStart: Bool {return _storage._monthPeriodStart != nil}
  /// Clears the value of `monthPeriodStart`. Subsequent reads from it will return its default value.
  mutating func clearMonthPeriodStart() {_uniqueStorage()._monthPeriodStart = nil}

  var threeMonthsPeriodStart: Google_Type_Date {
    get {return _storage._threeMonthsPeriodStart ?? Google_Type_Date()}
    set {_uniqueStorage()._threeMonthsPeriodStart = newValue}
  }
  /// Returns true if `threeMonthsPeriodStart` has been explicitly set.
  var hasThreeMonthsPeriodStart: Bool {return _storage._threeMonthsPeriodStart != nil}
  /// Clears the value of `threeMonthsPeriodStart`. Subsequent reads from it will return its default value.
  mutating func clearThreeMonthsPeriodStart() {_uniqueStorage()._threeMonthsPeriodStart = nil}

  var yearPeriodStart: Google_Type_Date {
    get {return _storage._yearPeriodStart ?? Google_Type_Date()}
    set {_uniqueStorage()._yearPeriodStart = newValue}
  }
  /// Returns true if `yearPeriodStart` has been explicitly set.
  var hasYearPeriodStart: Bool {return _storage._yearPeriodStart != nil}
  /// Clears the value of `yearPeriodStart`. Subsequent reads from it will return its default value.
  mutating func clearYearPeriodStart() {_uniqueStorage()._yearPeriodStart = nil}

  var threeYearsPeriodStart: Google_Type_Date {
    get {return _storage._threeYearsPeriodStart ?? Google_Type_Date()}
    set {_uniqueStorage()._threeYearsPeriodStart = newValue}
  }
  /// Returns true if `threeYearsPeriodStart` has been explicitly set.
  var hasThreeYearsPeriodStart: Bool {return _storage._threeYearsPeriodStart != nil}
  /// Clears the value of `threeYearsPeriodStart`. Subsequent reads from it will return its default value.
  mutating func clearThreeYearsPeriodStart() {_uniqueStorage()._threeYearsPeriodStart = nil}

  var allTimePeriodStart: GrpcOptionalDate {
    get {return _storage._allTimePeriodStart ?? GrpcOptionalDate()}
    set {_uniqueStorage()._allTimePeriodStart = newValue}
  }
  /// Returns true if `allTimePeriodStart` has been explicitly set.
  var hasAllTimePeriodStart: Bool {return _storage._allTimePeriodStart != nil}
  /// Clears the value of `allTimePeriodStart`. Subsequent reads from it will return its default value.
  mutating func clearAllTimePeriodStart() {_uniqueStorage()._allTimePeriodStart = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension GetInstrumentBriefRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GetInstrumentBriefRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ticker"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.ticker)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ticker.isEmpty {
      try visitor.visitSingularStringField(value: self.ticker, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GetInstrumentBriefRequest, rhs: GetInstrumentBriefRequest) -> Bool {
    if lhs.ticker != rhs.ticker {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GetInstrumentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GetInstrumentRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ticker"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.ticker)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ticker.isEmpty {
      try visitor.visitSingularStringField(value: self.ticker, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GetInstrumentRequest, rhs: GetInstrumentRequest) -> Bool {
    if lhs.ticker != rhs.ticker {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GetInstrumentsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GetInstrumentsRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "filter"),
  ]

  fileprivate class _StorageClass {
    var _filter: InstrumentsFilter? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _filter = source._filter
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._filter)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._filter {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GetInstrumentsRequest, rhs: GetInstrumentsRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._filter != rhs_storage._filter {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ListInstrumentsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ListInstrumentsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "instruments"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.instruments)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.instruments.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.instruments, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ListInstrumentsResponse, rhs: ListInstrumentsResponse) -> Bool {
    if lhs.instruments != rhs.instruments {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GetInstrumentsBriefRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GetInstrumentsBriefRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "filter"),
  ]

  fileprivate class _StorageClass {
    var _filter: InstrumentsFilter? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _filter = source._filter
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._filter)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._filter {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GetInstrumentsBriefRequest, rhs: GetInstrumentsBriefRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._filter != rhs_storage._filter {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ListInstrumentsBriefResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ListInstrumentsBriefResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "instruments"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.instruments)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.instruments.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.instruments, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ListInstrumentsBriefResponse, rhs: ListInstrumentsBriefResponse) -> Bool {
    if lhs.instruments != rhs.instruments {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension InstrumentsFilter: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "InstrumentsFilter"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tickers"),
    2: .same(proto: "secType"),
    3: .same(proto: "currency"),
    4: .same(proto: "tradingStatus"),
    5: .same(proto: "commonTypes"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedStringField(value: &self.tickers)
      case 2: try decoder.decodeRepeatedEnumField(value: &self.secType)
      case 3: try decoder.decodeRepeatedEnumField(value: &self.currency)
      case 4: try decoder.decodeRepeatedEnumField(value: &self.tradingStatus)
      case 5: try decoder.decodeRepeatedEnumField(value: &self.commonTypes)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.tickers.isEmpty {
      try visitor.visitRepeatedStringField(value: self.tickers, fieldNumber: 1)
    }
    if !self.secType.isEmpty {
      try visitor.visitPackedEnumField(value: self.secType, fieldNumber: 2)
    }
    if !self.currency.isEmpty {
      try visitor.visitPackedEnumField(value: self.currency, fieldNumber: 3)
    }
    if !self.tradingStatus.isEmpty {
      try visitor.visitPackedEnumField(value: self.tradingStatus, fieldNumber: 4)
    }
    if !self.commonTypes.isEmpty {
      try visitor.visitPackedEnumField(value: self.commonTypes, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: InstrumentsFilter, rhs: InstrumentsFilter) -> Bool {
    if lhs.tickers != rhs.tickers {return false}
    if lhs.secType != rhs.secType {return false}
    if lhs.currency != rhs.currency {return false}
    if lhs.tradingStatus != rhs.tradingStatus {return false}
    if lhs.commonTypes != rhs.commonTypes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension InstrumentBrief: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "InstrumentBrief"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "instrumentId"),
    2: .same(proto: "description"),
    3: .same(proto: "price"),
    4: .same(proto: "currency"),
    6: .same(proto: "dayChange"),
    7: .same(proto: "weekChange"),
    8: .same(proto: "monthChange"),
    9: .same(proto: "threeMonthsChange"),
    10: .same(proto: "yearChange"),
    11: .same(proto: "threeYearsChange"),
    12: .same(proto: "allTimeChange"),
    13: .standard(proto: "sec_type"),
    15: .same(proto: "lotSize"),
    16: .standard(proto: "maturity_date"),
    17: .same(proto: "commonType"),
  ]

  fileprivate class _StorageClass {
    var _instrumentID: String = String()
    var _description_p: String = String()
    var _price: Iticapital_ApiMts_Type_Float? = nil
    var _currency: Iticapital_ApiMts_Security_V1_Currency = .unspecified
    var _dayChange: Iticapital_ApiMts_Type_Float? = nil
    var _weekChange: Iticapital_ApiMts_Type_Float? = nil
    var _monthChange: Iticapital_ApiMts_Type_Float? = nil
    var _threeMonthsChange: Iticapital_ApiMts_Type_Float? = nil
    var _yearChange: Iticapital_ApiMts_Type_Float? = nil
    var _threeYearsChange: Iticapital_ApiMts_Type_Float? = nil
    var _allTimeChange: Iticapital_ApiMts_Type_Float? = nil
    var _secType: Iticapital_ApiMts_Security_V1_SecurityType = .unspecified
    var _lotSize: UInt64 = 0
    var _maturityDate: Google_Type_Date? = nil
    var _commonType: GrpcInstrumentCommonType = .other

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _instrumentID = source._instrumentID
      _description_p = source._description_p
      _price = source._price
      _currency = source._currency
      _dayChange = source._dayChange
      _weekChange = source._weekChange
      _monthChange = source._monthChange
      _threeMonthsChange = source._threeMonthsChange
      _yearChange = source._yearChange
      _threeYearsChange = source._threeYearsChange
      _allTimeChange = source._allTimeChange
      _secType = source._secType
      _lotSize = source._lotSize
      _maturityDate = source._maturityDate
      _commonType = source._commonType
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._instrumentID)
        case 2: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._price)
        case 4: try decoder.decodeSingularEnumField(value: &_storage._currency)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._dayChange)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._weekChange)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._monthChange)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._threeMonthsChange)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._yearChange)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._threeYearsChange)
        case 12: try decoder.decodeSingularMessageField(value: &_storage._allTimeChange)
        case 13: try decoder.decodeSingularEnumField(value: &_storage._secType)
        case 15: try decoder.decodeSingularUInt64Field(value: &_storage._lotSize)
        case 16: try decoder.decodeSingularMessageField(value: &_storage._maturityDate)
        case 17: try decoder.decodeSingularEnumField(value: &_storage._commonType)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._instrumentID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._instrumentID, fieldNumber: 1)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 2)
      }
      if let v = _storage._price {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if _storage._currency != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._currency, fieldNumber: 4)
      }
      if let v = _storage._dayChange {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._weekChange {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._monthChange {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._threeMonthsChange {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if let v = _storage._yearChange {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if let v = _storage._threeYearsChange {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if let v = _storage._allTimeChange {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
      if _storage._secType != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._secType, fieldNumber: 13)
      }
      if _storage._lotSize != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._lotSize, fieldNumber: 15)
      }
      if let v = _storage._maturityDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      }
      if _storage._commonType != .other {
        try visitor.visitSingularEnumField(value: _storage._commonType, fieldNumber: 17)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: InstrumentBrief, rhs: InstrumentBrief) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._instrumentID != rhs_storage._instrumentID {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._price != rhs_storage._price {return false}
        if _storage._currency != rhs_storage._currency {return false}
        if _storage._dayChange != rhs_storage._dayChange {return false}
        if _storage._weekChange != rhs_storage._weekChange {return false}
        if _storage._monthChange != rhs_storage._monthChange {return false}
        if _storage._threeMonthsChange != rhs_storage._threeMonthsChange {return false}
        if _storage._yearChange != rhs_storage._yearChange {return false}
        if _storage._threeYearsChange != rhs_storage._threeYearsChange {return false}
        if _storage._allTimeChange != rhs_storage._allTimeChange {return false}
        if _storage._secType != rhs_storage._secType {return false}
        if _storage._lotSize != rhs_storage._lotSize {return false}
        if _storage._maturityDate != rhs_storage._maturityDate {return false}
        if _storage._commonType != rhs_storage._commonType {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Instrument: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Instrument"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "instrumentId"),
    2: .same(proto: "description"),
    3: .standard(proto: "sec_type"),
    4: .standard(proto: "lot_size"),
    5: .standard(proto: "face_value"),
    6: .standard(proto: "maturity_date"),
    10: .same(proto: "coupon"),
    11: .standard(proto: "coupon_period"),
    12: .standard(proto: "next_coupon"),
    13: .same(proto: "currency"),
    14: .standard(proto: "min_step"),
    16: .same(proto: "decimals"),
    18: .same(proto: "price"),
    19: .same(proto: "isin"),
    20: .standard(proto: "accrued_interest"),
    21: .same(proto: "dayChange"),
    22: .same(proto: "weekChange"),
    23: .same(proto: "monthChange"),
    24: .same(proto: "threeMonthsChange"),
    25: .same(proto: "yearChange"),
    26: .same(proto: "threeYearsChange"),
    27: .same(proto: "allTimeChange"),
    28: .standard(proto: "full_description"),
    30: .same(proto: "priceActualityTime"),
    31: .same(proto: "commonType"),
    32: .same(proto: "dayPeriodStart"),
    33: .same(proto: "weekPeriodStart"),
    34: .same(proto: "monthPeriodStart"),
    35: .same(proto: "threeMonthsPeriodStart"),
    36: .same(proto: "yearPeriodStart"),
    37: .same(proto: "threeYearsPeriodStart"),
    38: .same(proto: "allTimePeriodStart"),
  ]

  fileprivate class _StorageClass {
    var _instrumentID: String = String()
    var _description_p: String = String()
    var _secType: Iticapital_ApiMts_Security_V1_SecurityType = .unspecified
    var _lotSize: UInt32 = 0
    var _faceValue: UInt32 = 0
    var _maturityDate: Google_Type_Date? = nil
    var _coupon: Iticapital_ApiMts_Type_Float? = nil
    var _couponPeriod: UInt32 = 0
    var _nextCoupon: Google_Type_Date? = nil
    var _currency: Iticapital_ApiMts_Security_V1_Currency = .unspecified
    var _minStep: Iticapital_ApiMts_Type_Float? = nil
    var _decimals: Double = 0
    var _price: Iticapital_ApiMts_Type_Float? = nil
    var _isin: String = String()
    var _accruedInterest: Iticapital_ApiMts_Type_Float? = nil
    var _dayChange: Iticapital_ApiMts_Type_Float? = nil
    var _weekChange: Iticapital_ApiMts_Type_Float? = nil
    var _monthChange: Iticapital_ApiMts_Type_Float? = nil
    var _threeMonthsChange: Iticapital_ApiMts_Type_Float? = nil
    var _yearChange: Iticapital_ApiMts_Type_Float? = nil
    var _threeYearsChange: Iticapital_ApiMts_Type_Float? = nil
    var _allTimeChange: Iticapital_ApiMts_Type_Float? = nil
    var _fullDescription: String = String()
    var _priceActualityTime: UInt64 = 0
    var _commonType: GrpcInstrumentCommonType = .other
    var _dayPeriodStart: Google_Type_Date? = nil
    var _weekPeriodStart: Google_Type_Date? = nil
    var _monthPeriodStart: Google_Type_Date? = nil
    var _threeMonthsPeriodStart: Google_Type_Date? = nil
    var _yearPeriodStart: Google_Type_Date? = nil
    var _threeYearsPeriodStart: Google_Type_Date? = nil
    var _allTimePeriodStart: GrpcOptionalDate? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _instrumentID = source._instrumentID
      _description_p = source._description_p
      _secType = source._secType
      _lotSize = source._lotSize
      _faceValue = source._faceValue
      _maturityDate = source._maturityDate
      _coupon = source._coupon
      _couponPeriod = source._couponPeriod
      _nextCoupon = source._nextCoupon
      _currency = source._currency
      _minStep = source._minStep
      _decimals = source._decimals
      _price = source._price
      _isin = source._isin
      _accruedInterest = source._accruedInterest
      _dayChange = source._dayChange
      _weekChange = source._weekChange
      _monthChange = source._monthChange
      _threeMonthsChange = source._threeMonthsChange
      _yearChange = source._yearChange
      _threeYearsChange = source._threeYearsChange
      _allTimeChange = source._allTimeChange
      _fullDescription = source._fullDescription
      _priceActualityTime = source._priceActualityTime
      _commonType = source._commonType
      _dayPeriodStart = source._dayPeriodStart
      _weekPeriodStart = source._weekPeriodStart
      _monthPeriodStart = source._monthPeriodStart
      _threeMonthsPeriodStart = source._threeMonthsPeriodStart
      _yearPeriodStart = source._yearPeriodStart
      _threeYearsPeriodStart = source._threeYearsPeriodStart
      _allTimePeriodStart = source._allTimePeriodStart
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._instrumentID)
        case 2: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 3: try decoder.decodeSingularEnumField(value: &_storage._secType)
        case 4: try decoder.decodeSingularUInt32Field(value: &_storage._lotSize)
        case 5: try decoder.decodeSingularUInt32Field(value: &_storage._faceValue)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._maturityDate)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._coupon)
        case 11: try decoder.decodeSingularUInt32Field(value: &_storage._couponPeriod)
        case 12: try decoder.decodeSingularMessageField(value: &_storage._nextCoupon)
        case 13: try decoder.decodeSingularEnumField(value: &_storage._currency)
        case 14: try decoder.decodeSingularMessageField(value: &_storage._minStep)
        case 16: try decoder.decodeSingularDoubleField(value: &_storage._decimals)
        case 18: try decoder.decodeSingularMessageField(value: &_storage._price)
        case 19: try decoder.decodeSingularStringField(value: &_storage._isin)
        case 20: try decoder.decodeSingularMessageField(value: &_storage._accruedInterest)
        case 21: try decoder.decodeSingularMessageField(value: &_storage._dayChange)
        case 22: try decoder.decodeSingularMessageField(value: &_storage._weekChange)
        case 23: try decoder.decodeSingularMessageField(value: &_storage._monthChange)
        case 24: try decoder.decodeSingularMessageField(value: &_storage._threeMonthsChange)
        case 25: try decoder.decodeSingularMessageField(value: &_storage._yearChange)
        case 26: try decoder.decodeSingularMessageField(value: &_storage._threeYearsChange)
        case 27: try decoder.decodeSingularMessageField(value: &_storage._allTimeChange)
        case 28: try decoder.decodeSingularStringField(value: &_storage._fullDescription)
        case 30: try decoder.decodeSingularUInt64Field(value: &_storage._priceActualityTime)
        case 31: try decoder.decodeSingularEnumField(value: &_storage._commonType)
        case 32: try decoder.decodeSingularMessageField(value: &_storage._dayPeriodStart)
        case 33: try decoder.decodeSingularMessageField(value: &_storage._weekPeriodStart)
        case 34: try decoder.decodeSingularMessageField(value: &_storage._monthPeriodStart)
        case 35: try decoder.decodeSingularMessageField(value: &_storage._threeMonthsPeriodStart)
        case 36: try decoder.decodeSingularMessageField(value: &_storage._yearPeriodStart)
        case 37: try decoder.decodeSingularMessageField(value: &_storage._threeYearsPeriodStart)
        case 38: try decoder.decodeSingularMessageField(value: &_storage._allTimePeriodStart)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._instrumentID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._instrumentID, fieldNumber: 1)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 2)
      }
      if _storage._secType != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._secType, fieldNumber: 3)
      }
      if _storage._lotSize != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._lotSize, fieldNumber: 4)
      }
      if _storage._faceValue != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._faceValue, fieldNumber: 5)
      }
      if let v = _storage._maturityDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._coupon {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if _storage._couponPeriod != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._couponPeriod, fieldNumber: 11)
      }
      if let v = _storage._nextCoupon {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
      if _storage._currency != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._currency, fieldNumber: 13)
      }
      if let v = _storage._minStep {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }
      if _storage._decimals != 0 {
        try visitor.visitSingularDoubleField(value: _storage._decimals, fieldNumber: 16)
      }
      if let v = _storage._price {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      }
      if !_storage._isin.isEmpty {
        try visitor.visitSingularStringField(value: _storage._isin, fieldNumber: 19)
      }
      if let v = _storage._accruedInterest {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      }
      if let v = _storage._dayChange {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      }
      if let v = _storage._weekChange {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
      }
      if let v = _storage._monthChange {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
      }
      if let v = _storage._threeMonthsChange {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
      }
      if let v = _storage._yearChange {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 25)
      }
      if let v = _storage._threeYearsChange {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 26)
      }
      if let v = _storage._allTimeChange {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 27)
      }
      if !_storage._fullDescription.isEmpty {
        try visitor.visitSingularStringField(value: _storage._fullDescription, fieldNumber: 28)
      }
      if _storage._priceActualityTime != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._priceActualityTime, fieldNumber: 30)
      }
      if _storage._commonType != .other {
        try visitor.visitSingularEnumField(value: _storage._commonType, fieldNumber: 31)
      }
      if let v = _storage._dayPeriodStart {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 32)
      }
      if let v = _storage._weekPeriodStart {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 33)
      }
      if let v = _storage._monthPeriodStart {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 34)
      }
      if let v = _storage._threeMonthsPeriodStart {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 35)
      }
      if let v = _storage._yearPeriodStart {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 36)
      }
      if let v = _storage._threeYearsPeriodStart {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 37)
      }
      if let v = _storage._allTimePeriodStart {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 38)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Instrument, rhs: Instrument) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._instrumentID != rhs_storage._instrumentID {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._secType != rhs_storage._secType {return false}
        if _storage._lotSize != rhs_storage._lotSize {return false}
        if _storage._faceValue != rhs_storage._faceValue {return false}
        if _storage._maturityDate != rhs_storage._maturityDate {return false}
        if _storage._coupon != rhs_storage._coupon {return false}
        if _storage._couponPeriod != rhs_storage._couponPeriod {return false}
        if _storage._nextCoupon != rhs_storage._nextCoupon {return false}
        if _storage._currency != rhs_storage._currency {return false}
        if _storage._minStep != rhs_storage._minStep {return false}
        if _storage._decimals != rhs_storage._decimals {return false}
        if _storage._price != rhs_storage._price {return false}
        if _storage._isin != rhs_storage._isin {return false}
        if _storage._accruedInterest != rhs_storage._accruedInterest {return false}
        if _storage._dayChange != rhs_storage._dayChange {return false}
        if _storage._weekChange != rhs_storage._weekChange {return false}
        if _storage._monthChange != rhs_storage._monthChange {return false}
        if _storage._threeMonthsChange != rhs_storage._threeMonthsChange {return false}
        if _storage._yearChange != rhs_storage._yearChange {return false}
        if _storage._threeYearsChange != rhs_storage._threeYearsChange {return false}
        if _storage._allTimeChange != rhs_storage._allTimeChange {return false}
        if _storage._fullDescription != rhs_storage._fullDescription {return false}
        if _storage._priceActualityTime != rhs_storage._priceActualityTime {return false}
        if _storage._commonType != rhs_storage._commonType {return false}
        if _storage._dayPeriodStart != rhs_storage._dayPeriodStart {return false}
        if _storage._weekPeriodStart != rhs_storage._weekPeriodStart {return false}
        if _storage._monthPeriodStart != rhs_storage._monthPeriodStart {return false}
        if _storage._threeMonthsPeriodStart != rhs_storage._threeMonthsPeriodStart {return false}
        if _storage._yearPeriodStart != rhs_storage._yearPeriodStart {return false}
        if _storage._threeYearsPeriodStart != rhs_storage._threeYearsPeriodStart {return false}
        if _storage._allTimePeriodStart != rhs_storage._allTimePeriodStart {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
